

include:
  - template: Auto-DevOps.gitlab-ci.yml

stages:
  - pytest
  - build
  - test
  - deploy
  - review
  - dast
  - staging
  - canary
  - release
  - production
  - incremental rollout 10%
  - incremental rollout 25%
  - incremental rollout 50%
  - incremental rollout 100%
  - performance
  - cleanup

pytest-feature:
  stage: pytest
  image: python:3.8
  script:
    - export PYTHONPATH=$PYTHONPATH:$(pwd)
    - echo "Running custom tests"
    - pip install -r requirements.txt
    - pytest  tests/test-app.py
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^feature/'  # This runs on branches starting with 'feature/'
      when: always
    - when: never # Aviod running in other branches

pysec-tests:
  stage: test
  image: python:3.8
  script:
    - echo "Running custom Python Security tests"
    - echo "Passed custom Python Security tests"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'  # This runs on the main branch
      when: always
    - if: '$CI_COMMIT_BRANCH =~ /^feature/'  # This runs on branches starting with 'feature/'
      when: always
    - when: never # Aviod running in other branches

test:
  stage: test
  rules:
    - when: never

create-tag-build:
  stage: pytest
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  variables:
    GIT_STRATEGY: clone  # Ensures a full clone for tagging purposes
  before_script:
    - apk update && apk add --no-cache openssh-client bash git
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "bbertka@gmail.com"
    - git config --global user.name "Ben Bertka"
    - git remote set-url origin git@gitlab.com:sa-demo-group/ben-bertka-demo-group/stock-service.git
    - git fetch --tags
  script:
    - |
      bash -c '
      LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1));
      echo "Latest tag: $LATEST_TAG";
      IFS="." read -ra ADDR <<< "${LATEST_TAG#v}";
      new_patch_version=$((ADDR[2] + 1));
      NEW_TAG="v${ADDR[0]}.${ADDR[1]}.$new_patch_version";
      echo "New tag will be $NEW_TAG";
      git tag $NEW_TAG;
      git push origin $NEW_TAG;
      echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin;
      docker build -t $CI_REGISTRY_IMAGE:$NEW_TAG -t $CI_REGISTRY_IMAGE:latest -f Dockerfile .;
      docker push $CI_REGISTRY_IMAGE:$NEW_TAG;
      docker push $CI_REGISTRY_IMAGE:latest;
      '
  only:
    - feature

create-release:
  stage: pytest
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - |
      bash -c '
      LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1));
      echo "Latest tag: $LATEST_TAG";
      release-cli create --name "Release $LATEST_TAG" --tag-name "$LATEST_TAG" \
      --description "Automated release for $LATEST_TAG" --ref "$LATEST_TAG"
  dependencies:
    - create-tag-build
  only:
    - feature



release-dockerhub-amd64:
  stage: release
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_REGISTRY: "docker.io"
    DOCKER_CLI_EXPERIMENTAL: "enabled"
    DOCKER_HOST: tcp://docker:2375
    DOCKER_IMAGE_NAME: "$DOCKER_USERNAME/stock-flask-app"
    DOCKER_BASE_TAG: "latest"
    DOCKER_FILE: "Dockerfile"
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" $DOCKER_REGISTRY --password-stdin
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use
  script:
    - >
      docker buildx build
      --platform linux/amd64
      -t $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$DOCKER_BASE_TAG
      -f $DOCKER_FILE
      --push .
  only:
    - main
  needs:
    - job: dast
      optional: false


release-dockerhub-arm64:
  stage: release
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_REGISTRY: "docker.io"
    DOCKER_CLI_EXPERIMENTAL: "enabled"
    DOCKER_HOST: tcp://docker:2375
    DOCKER_IMAGE_NAME: "$DOCKER_USERNAME/stock-flask-app"
    DOCKER_BASE_TAG: "latest-arm64"
    DOCKER_FILE: "Dockerfile"
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" $DOCKER_REGISTRY --password-stdin
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use
  script:
    - >
      docker buildx build
      --platform linux/arm64
      -t $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$DOCKER_BASE_TAG
      -f $DOCKER_FILE
      --push .
  only:
    - main
  needs:
    - job: dast
      optional: false

