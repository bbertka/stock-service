

include:
  - template: Auto-DevOps.gitlab-ci.yml

stages:
  - pytest
  - build
  - test
  - deploy
  - review
  - dast
  - staging
  - canary
  - create-release
  - production
  - incremental rollout 10%
  - incremental rollout 25%
  - incremental rollout 50%
  - incremental rollout 100%
  - performance
  - cleanup

pytest-feature:
  stage: pytest
  image: python:3.8
  script:
    - export PYTHONPATH=$PYTHONPATH:$(pwd)
    - echo "Running custom tests"
    - pip install -r requirements.txt
    - pytest  tests/test-app.py
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^feature/'  # This runs on branches starting with 'feature/'
      when: always
    - when: never # Aviod running in other branches

pysec-tests:
  stage: test
  image: python:3.8
  script:
    - echo "Running custom Python Security tests"
    - echo "Passed custom Python Security tests"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'  # This runs on the main branch
      when: always
    - if: '$CI_COMMIT_BRANCH =~ /^feature/'  # This runs on branches starting with 'feature/'
      when: always
    - when: never # Aviod running in other branches

test:
  stage: test
  rules:
    - when: never

create-tag:
  stage: create-release
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  variables:
    GIT_STRATEGY: clone  # Ensures a full clone for tagging purposes
  before_script:
    - apk update && apk add --no-cache openssh-client bash git
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "bbertka@gmail.com"
    - git config --global user.name "Ben Bertka"
    - git remote set-url origin git@gitlab.com:sa-demo-group/ben-bertka-demo-group/stock-service.git
    - git fetch --tags
  script:
    - |
      bash -c '
      LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1));
      echo "Latest tag: $LATEST_TAG";
      IFS="." read -ra ADDR <<< "${LATEST_TAG#v}";
      new_patch_version=$((ADDR[2] + 1));
      NEW_TAG="v${ADDR[0]}.${ADDR[1]}.$new_patch_version";
      echo "New tag will be $NEW_TAG";
      git tag $NEW_TAG;
      git push origin $NEW_TAG;
      '
  only:
    - main
  needs:
    - job: dast
      optional: false

build-image:
  stage: create-release
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  variables:
    GIT_STRATEGY: clone  # Ensures a full clone for tagging purposes
    PUBLIC_REGISTRY: "docker.io"
    PUBLIC_IMAGE: "bbertka/stock-service"
  before_script:
    - apk update && apk add --no-cache openssh-client bash git
    - git fetch --tags
  script:
    - LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1));
    - echo "Latest tag is $LATEST_TAG";
    # Internal repo image push
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin;
    - docker build -t $CI_REGISTRY_IMAGE:$LATEST_TAG -t $CI_REGISTRY_IMAGE:latest --build-arg SOFTWARE_VERSION=$LATEST_TAG -f Dockerfile .;
    - docker push $CI_REGISTRY_IMAGE:$LATEST_TAG;
    - docker push $CI_REGISTRY_IMAGE:latest;
    # External repo image push
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" $PUBLIC_REGISTRY --password-stdin;
    - docker build -t $PUBLIC_REGISTRY/$PUBLIC_IMAGE:$LATEST_TAG -t $PUBLIC_REGISTRY/$PUBLIC_IMAGE:latest --build-arg SOFTWARE_VERSION=$LATEST_TAG  -f Dockerfile .;
    - docker push $PUBLIC_REGISTRY/$PUBLIC_IMAGE:$LATEST_TAG;
    - docker push $PUBLIC_REGISTRY/$PUBLIC_IMAGE:latest;
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  needs:
    - job: create-tag
      optional: false

tag-release:
  stage: create-release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script:
    - apk update && apk add --no-cache openssh-client bash git
    - git fetch --tags
  script:
      - LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1));
      - echo "Latest tag is $LATEST_TAG";
      - release-cli create --name "Release $LATEST_TAG" --tag-name "$LATEST_TAG" --description "Automated release for $LATEST_TAG" --ref "$LATEST_TAG";
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  needs:
    - job: build-image
      optional: false