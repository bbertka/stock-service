
include:
  - template: Auto-DevOps.gitlab-ci.yml

stages:
  - pytest
  - build
  - test
  - deploy
  - review
  - dast
  - staging
  - canary
  - release
  - external-release
  - production
  - incremental rollout 10%
  - incremental rollout 25%
  - incremental rollout 50%
  - incremental rollout 100%
  - performance
  - cleanup

pytest-feature:
  stage: pytest
  image: python:3.8
  script:
    - export PYTHONPATH=$PYTHONPATH:$(pwd)
    - echo "Running custom tests"
    - pip install -r requirements.txt
    - pytest  tests/test-app.py
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^feature/'  # This runs on branches starting with 'feature/'
      when: always
    - when: never # Aviod running in other branches

pysec-tests:
  stage: test
  image: python:3.8
  script:
    - echo "Running custom Python Security tests"
    - echo "Passed custom Python Security tests"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'  # This runs on the main branch
      when: always
    - if: '$CI_COMMIT_BRANCH =~ /^feature/'  # This runs on branches starting with 'feature/'
      when: always
    - when: never # Aviod running in other branches

test:
  stage: test
  rules:
    - when: never

create-tag:
  stage: release
  image: docker:latest
  services:
    - docker:dind
  variables:
    GIT_STRATEGY: clone
  before_script:
    - apk add --no-cache bash git
    - git config --global user.email "bbertka@gmail.com"
    - git config --global user.name "Ben Bertka"
    - git fetch --tags
  script:
    - >
      latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
      echo "Latest tag: $latest_tag"
    - IFS="." read -ra ADDR <<< "${latest_tag#v}"
    - new_patch_version=$((ADDR[2] + 1))
    - new_tag="v${ADDR[0]}.${ADDR[1]}.$new_patch_version"
    - echo "New tag will be $new_tag"
    - git tag $new_tag
    - git push origin $new_tag
    - echo "NEW_TAG=$new_tag" > build.env
  artifacts:
    paths:
      - build.env
  only:
    - main

build-image:
  stage: release
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - create-tag
  before_script:
    - if [ -f build.env ]; then source build.env; fi
    - >
      echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY 
      -u $CI_REGISTRY_USER --password-stdin
  script:
    - >
      docker build -t $CI_REGISTRY_IMAGE:$NEW_TAG
      -t $CI_REGISTRY_IMAGE:latest -f Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:$NEW_TAG
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
  needs:
    - create-tag

create-release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  dependencies:
    - build-image
  before_script:
    - if [ -f build.env ]; then source build.env; fi
  script:
    - >
      release-cli create --name "$NEW_TAG" --tag-name "$NEW_TAG" 
      --description "Automated release for $NEW_TAG" --ref "$NEW_TAG"
  only:
    - main
  needs:
    - build-image

dockerhub-amd64:
  stage: external-release
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_REGISTRY: "docker.io"
    DOCKER_CLI_EXPERIMENTAL: "enabled"
    DOCKER_HOST: tcp://docker:2375
    DOCKER_IMAGE_NAME: "$DOCKER_USERNAME/stock-flask-app"
    DOCKER_BASE_TAG: "latest"
    DOCKER_FILE: "Dockerfile"
  before_script:
    - >
      echo "$DOCKER_PASSWORD" | docker login 
      -u "$DOCKER_USERNAME" $DOCKER_REGISTRY --password-stdin
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use
  script:
    - >
      docker buildx build
      --platform linux/amd64
      -t $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$DOCKER_BASE_TAG
      -f $DOCKER_FILE
      --push .
  only:
    - main
  needs:
    - job: create-release
      optional: false

dockerhub-arm64:
  stage: external-release
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_REGISTRY: "docker.io"
    DOCKER_CLI_EXPERIMENTAL: "enabled"
    DOCKER_HOST: tcp://docker:2375
    DOCKER_IMAGE_NAME: "$DOCKER_USERNAME/stock-flask-app"
    DOCKER_BASE_TAG: "latest-arm64"
    DOCKER_FILE: "Dockerfile"
  before_script:
    - >
      echo "$DOCKER_PASSWORD" | docker login 
      -u "$DOCKER_USERNAME" $DOCKER_REGISTRY --password-stdin
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use
  script:
    - >
      docker buildx build
      --platform linux/arm64
      -t $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$DOCKER_BASE_TAG
      -f $DOCKER_FILE
      --push .
  only:
    - main
  needs:
    - job: create-release
      optional: false
